*##Exercicio1*

*a)//a resposta será diretamente do banco de dados, neste caso, uma lista com dados relacionados ao id da tabela "Actor",
como não especificou qual é o id,irá retornar os ids ordenados e mais os dados correspondentes a linha do mesmo. 
No caso como é uma query de leitura, temos que nos atentar porque são devolvidos dois array, e o segundo são dados 
internos do banco que não tem motivo para serem enviados para o frontend, por isso existe um return result[0][0]
para retornar apenas o indice "[0]".

*b)import { Request, Response } from "express"
const seachActorName = async (id: string): Promise<any> => {
const result = await connection.raw(`
 SELECT * FROM Actor WHERE name = '${name}'
  `)

	return result [0] [0]
}


*c)import { Request, Response } from "express"
const genderActor = async (id: string): Promise<any> => {
const result = await connection.raw(`
 SELECT COUNT (*) Actor WHERE gender = '${gender}'
  `)

	return result
}

*##exercicio2*

*a)const updateActor = async (
  id: string,
  salary: number,
 ): Promise<any> => {
  await connection("Actor")
    .update({
      salary: salary,
})
    .where("id");
};

*b) const deleteActor = async (
  id: string,
): Promise<any> => {
  await connection("Actor")
    .delete()
    .where("id");
};

*c) ????

*##exercicio3*

*a)app.get("/Actor/:id/", async (req: Request, Res: Response)=>{
try{
const id = req.params.id;
const actor = await (id);

res.status(200).send(actor)
}catch(error){
 res.status(400).send({
 message: err.message,
});
}
});

*b)??

*##exercicio4*
*a)app.put("/actor", async (req: Request, res: Response) => {
  try {
    await updateSalaryActor(
      req.body.id,
      new salary(req.body.salary)
    );

    res.status(200).send("Update Sucess!");
  } catch (err) {
    res.status(400).send({
      message: err.message,
    });
  }
});

b)app.delete("/actor/:id", async (req: Request, res:Response){
try{
    await deleteActor(req.params.id);
} catch(error) {
  res.status(400).send({
      message: err.message,
});
 }
});